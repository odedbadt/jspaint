goog.require("mask.MaskLine");window["mask"]={};window["mask"]["MaskLine"]={};window["mask"]["MaskLine"]["testMerge"]=mask.MaskLine.testMerge;goog.provide("mask.MaskLine");
goog.scope(function(){mask.MaskLine.Boundaries;var Boundaries=mask.MaskLine.Boundaries;mask.MaskLine.merge=function(maskA,maskB){var iA=0;var iB=0;var sA=false;var sB=false;var output=[];while(true){debugger;if(iA<maskA.length&&maskA[iA]<maskB[iB]||iB>=maskB.length){output.push(maskB[iA]);iA++}else if(iB<maskB.length){output.push(maskB[iB]);iB++}else break}return output};var assertArrayEquals=function(a,b){if(a==null){if(b==null)return;throw"Only first array is null.";}if(a.length!=b.length){console.log(a,
b);throw"Arrays differ in size.";}for(var i=0;i<a.length;++i)if(a[i]!=b[i]){console.log(a,b);throw"Arrays differ in position ["+i+"].";}};mask.MaskLine.testMerge=function(){assertArrayEquals([0,15],mask.MaskLine.merge([0,10],[5,15]));assertArrayEquals([0,10,15,25],mask.MaskLine.merge([0,10],[15,25]))}});
